name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r requirements.txt
        
    - name: Run Black (code formatting check)
      run: |
        black --check --diff app/ tests/
        
    - name: Run isort (import sorting check)
      run: |
        isort --check-only --diff app/ tests/
        
    - name: Run flake8 (linting)
      run: |
        flake8 app/ tests/ --max-line-length=100 --extend-ignore=E203,W503
        
    - name: Run mypy (type checking)
      run: |
        mypy app/ --ignore-missing-imports --no-strict-optional
        
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y nodejs npm
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist pytest-mock
        
    - name: Install Playwright browsers
      run: |
        playwright install chromium
        
    - name: Set up test environment
      run: |
        cp .env.example .env || true
        echo "MONGODB_URL=mongodb://admin:password@localhost:27017/test_recipes_db?authSource=admin" >> .env
        echo "DATABASE_NAME=test_recipes_db" >> .env
        echo "LOG_LEVEL=INFO" >> .env
        echo "USE_STRUCTURED_LOGGING=true" >> .env
        
    - name: Wait for MongoDB
      run: |
        until mongosh --host localhost:27017 --username admin --password password --authenticationDatabase admin --eval "db.adminCommand('ping')"; do
          echo "Waiting for MongoDB..."
          sleep 2
        done
        
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing
      env:
        MONGODB_URL: mongodb://admin:password@localhost:27017/test_recipes_db?authSource=admin
        DATABASE_NAME: test_recipes_db
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        
    - name: Run integration tests
      run: |
        pytest tests/ -v -m "integration" --maxfail=5
      env:
        MONGODB_URL: mongodb://admin:password@localhost:27017/test_recipes_db?authSource=admin
        DATABASE_NAME: test_recipes_db
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          pytest.xml
          
  javascript-tests:
    name: JavaScript Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm install -g jshint
        
    - name: Run JavaScript validation
      run: |
        python validate_js.py
        
    - name: Run JSHint
      run: |
        find static/ -name "*.js" -exec jshint {} \;
        
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run Bandit security scan
      run: |
        bandit -r app/ -f json -o bandit-results.json || true
        bandit -r app/ -f txt
        
    - name: Run Safety check for vulnerable dependencies
      run: |
        safety check --json --output safety-results.json || true
        safety check
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-results.json
          safety-results.json
          
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build Docker image
      run: |
        docker build -t recipes-management:test .
        
    - name: Test Docker image
      run: |
        # Start the container and test health endpoint
        docker run -d --name test-container -p 8000:8000 recipes-management:test
        sleep 30
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Check logs for errors
        docker logs test-container
        
        # Cleanup
        docker stop test-container
        docker rm test-container
        
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
        
    - name: Run performance tests
      run: |
        pytest tests/test_performance.py -v
      env:
        MONGODB_URL: mongodb://admin:password@localhost:27017/test_recipes_db?authSource=admin
        DATABASE_NAME: test_recipes_db
        
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint, test, javascript-tests, security, docker-build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, test, javascript-tests, security, docker-build, performance]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, test, javascript-tests, security, docker-build]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.lint.result == 'success' && needs.test.result == 'success' && needs.javascript-tests.result == 'success' && needs.security.result == 'success' && needs.docker-build.result == 'success'
      run: |
        echo "✅ All checks passed successfully!"
        
    - name: Notify on failure
      if: needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.javascript-tests.result == 'failure' || needs.security.result == 'failure' || needs.docker-build.result == 'failure'
      run: |
        echo "❌ Some checks failed. Please review the results."
        exit 1